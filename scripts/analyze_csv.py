import pandas as pd

# --- CONFIGURATION ---
INPUT_CSV_FILE = 'exoticca_reviews_1_2_star_since_2024.csv'

def smarter_analysis(df):
    """
    Analyzes the DataFrame for reviews specifically about T&C rigidity
    by looking for combinations of keywords.
    """
    # Group 1: Core problem keywords (the "what")
    problem_keywords = [
        'cancel', 'cancellation', 'refund', 'change', 'amend', 'modify', 
        'voucher', 'credit', 'policy', 'terms', 'fee', 'charge', 'reschedule'
    ]

    # Group 2: Flexibility-related keywords (the "why" - rigidity)
    flexibility_keywords = [
        'stuck', 'no option', 'only option', 'flexible', 'flexibility',
        'strictest', 'rigid', 'unfair', 'unreasonable', 'trapped',
        'no choice', 'unable to', 'refused to', 'would not let me',
        'poor customer service', 'no compassion', 'extenuating circumstances'
    ]
    
    # Group 3: Exclusion keywords (to filter out unrelated issues)
    exclusion_keywords = [
        'scam', 'fraud', 'unsafe', 'dirty', 'poor quality', 'misleading ad'
    ]

    def contains_keyword(text, keywords):
        """Checks if any keyword from a list is in the text."""
        return any(keyword in text for keyword in keywords)

    def is_rigidity_complaint(review_text):
        """
        Returns True if the review is likely about T&C rigidity.
        A review qualifies if:
        1. It contains a "problem" keyword.
        2. It contains a "flexibility" keyword.
        3. It does NOT contain an "exclusion" keyword.
        """
        if not isinstance(review_text, str):
            return False
        
        text_lower = review_text.lower()

        has_problem = contains_keyword(text_lower, problem_keywords)
        has_flexibility_issue = contains_keyword(text_lower, flexibility_keywords)
        has_exclusion = contains_keyword(text_lower, exclusion_keywords)
        
        return has_problem and has_flexibility_issue and not has_exclusion

    # Apply the smarter function to the review text
    df['is_rigidity_complaint'] = df['review_text'].apply(is_rigidity_complaint)

    # Calculate and print the results
    total_reviews = len(df)
    rigidity_complaints = df['is_rigidity_complaint'].sum()
    
    if total_reviews > 0:
        percentage = (rigidity_complaints / total_reviews) * 100
    else:
        percentage = 0

    print("--- Smarter Analysis Complete ---")
    print(f"Total reviews analyzed from CSV: {total_reviews}")
    print(f"Reviews specifically about T&C rigidity: {rigidity_complaints}")
    print(f"Refined percentage: {percentage:.2f}%")
    
    # Optional: Save a new CSV with the analysis for review
    # df.to_csv('exoticca_reviews_analyzed.csv', index=False, encoding='utf-8-sig')
    # print("\nSaved detailed analysis to 'exoticca_reviews_analyzed.csv'")


if __name__ == '__main__':
    try:
        # Read the CSV file generated by the first script
        reviews_df = pd.read_csv(INPUT_CSV_FILE)
        smarter_analysis(reviews_df)
    except FileNotFoundError:
        print(f"Error: The file '{INPUT_CSV_FILE}' was not found.")
        print("Please make sure it's in the same directory as this script.")